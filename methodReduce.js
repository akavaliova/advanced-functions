"use strict";
// пример стрелочной функции const greet = () => 'Hello students!’
// Пример метода: const value = array.reduce(callback(accum, value, index, array), initAccum)
//этот метод массив не возвращает! он нам мужен, если допустим нужно посчитать все числа внутри массива
// initAccum это значение по умолчанию для параметра accum
// метод возвращает нам некий результат


const clonedNumbers = [2, 4, 6, 8, 10];
// хотим посчитать сумму всех чисел,которые у нас есть в массиве clonedNumbers
// метод reduce принимает в себя функцию callback
const sum = clonedNumbers.reduce((accum, value) => {    //вся запись это (accum, value, index, array), но для примера возьмем только accum и value 
 // у нас массив из пяти чисел, на первую итерацию цикла в accum прилетит 0 (ноль это initial value)
 // a внутрь value прилетит первый элемент массива, т.е. двойка
 // на вторую итерацию цикла в accum мы получаем результат первого вызова т.е. 0+2 = 2, а value это уже второй элемент массива т.е. 4
 // на третью итерацию цикла мы имеем accum  = уже 6 (2+4) а value будет третий элемент массива т.е. 6
 // на четвертую итерацию accum наш 6 + value 6 = 12
 // на пятую итерацию accum наш уже 12, а value это 8, т.е. 12+8 = 20
 // на шестую итерацию у нас уже accum 20, а value 10, т.е. 20 + 10 = 30
  return accum + value   // первая итерация цикла это  0 + 2 = 2 (эта двойка летит в accum), вторая итерация: 2 (accum) + 4 (value) = 6 (эта 6 летит в accum)
},0) //начинаем считать с нуля

// короче в accum поподает результат того, чтот мы возвращаем из предыдущей функции
// acum может в себя принимать и другой какой то объект и другой массив и тд
// но чаще всего мы используем accum чтобы посчитать сумму чисел в массиве
// или например, каждое число умножить на 2, а потом сложить эти все числа
